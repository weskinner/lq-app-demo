{"version":3,"sources":["logo.svg","features/counter/counterAPI.js","features/counter/counterSlice.js","layout/LiqwidApp.js","features/supply/supplySlice.js","features/supply/Supply.js","features/borrow/Borrow.js","features/wallet/Wallet.js","layout/DemoApp.js","features/borrow/borrowSlice.js","features/wallet/walletSlice.js","app/store.js","serviceWorker.js","index.js","features/counter/Counter.module.css"],"names":["fetchCount","amount","Promise","resolve","setTimeout","data","incrementAsync","createAsyncThunk","a","response","counterSlice","createSlice","name","initialState","value","status","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","LiqwidApp","supplySlice","markets","asset","APY","balance","collateral","isOn","totalBalance","toggleSupply","find","m","SupplyMarket","supply","useSelector","dispatch","useDispatch","marketRows","map","mkt","Form","Check","type","id","label","onChange","e","onToggleChanged","target","className","style","height","Table","BorrowMarket","borrow","wallet","liquidity","Button","address","LqNavbar","Navbar","bg","Brand","Collapse","Wallet","DemoApp","Container","Row","Col","marginTop","Supply","Borrow","borrowSlice","require","walletSlice","store","configureStore","reducer","counter","counterReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.5d4f47f1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.b2e5a01e.svg\";","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import './LiqwidApp.css'\n\nfunction LiqwidApp() {\n\n    return (\n        <div className=\"LiqwidApp\">\n            <section className=\"header\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-sm\">Liqwid</div>\n                        <div className=\"col-sm\"></div>\n                        <div className=\"col-sm text-right\">Wallet: A89...D7F</div>\n                    </div>\n                </div>\n            </section>\n            <section className=\"balance text-center\">\n                <div className=\"container\">\n                    <div className=\"row justify-content-md-center\">\n                        <div className=\"col-md-3 col-sm-4\">\n                            <div>Supply Balance</div>\n                            <div>$1,400.000000</div>\n                        </div>\n                        <div className=\"col-md-3 col-sm-4\">\n                            <div>Net APY</div>\n                            <div>10%</div>\n                        </div>\n                        <div className=\"col-md-3 col-sm-4\">\n                            <div>Borrow Balance</div>\n                            <div>$1,200.000000</div>\n                        </div>\n                    </div>\n                </div>\n            </section>\n            <section className=\"markets\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col\">\n                            <MarketPanel />\n                        </div>\n                        <div className=\"col\">\n                            <MarketPanel />\n                        </div>\n                    </div>\n                </div>\n            </section>\n        </div>\n    )   \n}\n\nfunction MarketPanel() {\n    return (\n        <div className=\"container market-panel border border-dark rounded\">\n            <div className=\"row\">\n                <div className=\"col py-3\">Supply</div>\n            </div>\n            <div className=\"row border-top border-dark py-1 text-muted\">\n                <div className=\"col\">\n                    Asset\n                                    </div>\n                <div className=\"col\">\n                    APY\n                                    </div>\n                <div className=\"col\">\n                    Wallet\n                                    </div>\n                <div className=\"col\">\n                    Collateral\n                                    </div>\n            </div>\n            <div className=\"row border-top border-dark py-4\">\n                <div className=\"col\">\n                    ADA\n                                    </div>\n                <div className=\"col\">\n                    5%\n                                    </div>\n                <div className=\"col\">\n                    1234.1283\n                                    </div>\n                <div className=\"col\">\n\n                </div>\n            </div>\n            <div className=\"row border-top border-dark py-4\">\n                <div className=\"col\">\n                    ADA\n                                    </div>\n                <div className=\"col\">\n                    5%\n                                    </div>\n                <div className=\"col\">\n                    1234.1283\n                                    </div>\n                <div className=\"col\">\n\n                </div>\n            </div>\n            <div className=\"row border-top border-dark py-4\">\n                <div className=\"col\">\n                    ADA\n                                    </div>\n                <div className=\"col\">\n                    5%\n                                    </div>\n                <div className=\"col\">\n                    1234.1283\n                                    </div>\n                <div className=\"col\">\n\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default LiqwidApp;","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const supplySlice = createSlice({\n  name: \"supply\",\n  initialState: {\n    markets: [\n      {\n        asset: \"ADA\",\n        APY: \"10\",\n        balance: \"1000\",\n        collateral: \"?\",\n        isOn: false\n      },\n      {\n        asset: \"LQ\",\n        APY: \"10\",\n        balance: \"1000\",\n        collateral: \"?\",\n        isOn: false\n      }\n    ],\n    totalBalance: 1337\n  },\n  reducers: {\n    toggleSupply(state, action) {\n      state.markets.find(m => m.asset === action.payload.asset).isOn = true\n    }\n  }\n})","import React from 'react';\nimport { Button, Form, Navbar, Table } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { supplySlice } from './supplySlice';\n\nconst SupplyMarket = () => {\n  const supply = useSelector(state => state.supply)\n  const dispatch = useDispatch()\n\n  const onToggleChanged = (asset, value) => {\n    const payload = {\n      asset,\n      value\n    }\n    dispatch(supplySlice.actions.toggleSupply(payload))\n  }\n\n  let marketRows = supply.markets.map(mkt => {\n    return (\n      <tr>\n        <td>{mkt.asset}</td>\n        <td>{mkt.APY}%</td>\n        <td>{mkt.balance} {mkt.asset}</td>\n        <td>{mkt.collateral}</td>\n        <td>\n          <Form>\n            <Form.Check\n              type=\"switch\"\n              id={\"switch\"+mkt.asset}\n              label=\"\"\n              onChange={e => onToggleChanged(mkt.asset, e.target.value)}\n              value={mkt.isOn}\n            ></Form.Check>\n          </Form>\n        </td>\n      </tr>\n    )\n  })\n  return (\n    <>\n      <div \n        className=\"d-flex justify-content-center align-items-center\"\n        style={{\n          height: \"100px\"\n        }}\n      >\n        <span className=\"border border-primary p-2\">Balance {supply.totalBalance}</span>\n      </div>\n      <h4>Supply Markets</h4>\n      <Table>\n        <thead>\n          <th>Asset</th>\n          <th>APY</th>\n          <th>Wallet</th>\n          <th>Collateral</th>\n          <th></th>\n        </thead>\n        <tbody>\n          {marketRows}\n        </tbody>\n      </Table>\n    </>\n  )\n}\n\nexport default SupplyMarket","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport Table from 'react-bootstrap/Table'\n\nconst BorrowMarket = () => {\n  const borrow = useSelector(state => state.borrow)\n\n  let marketRows = borrow.markets.map(mkt => {\n    return (\n      <tr>\n        <td>{mkt.asset}</td>\n        <td>{mkt.APY}%</td>\n        <td>{mkt.wallet} {mkt.asset}</td>\n        <td>{mkt.liquidity}</td>\n      </tr>\n    )\n  })\n  return (\n    <>\n      <div\n        className=\"d-flex justify-content-center align-items-center\"\n        style={{\n          height: \"100px\"\n        }}\n      >\n        <span className=\"border border-primary p-2\">Balance {borrow.totalBalance}</span>\n      </div>\n      <h4>Borrow Markets</h4>\n      <Table>\n        <thead>\n          <th>Assets</th>\n          <th>APY</th>\n          <th>Wallet</th>\n          <th>Liquidity</th>\n        </thead>\n        <tbody>\n          {marketRows}\n        </tbody>\n      </Table>\n    </>\n  )\n}\n\nexport default BorrowMarket","import React from 'react'\nimport { Button } from 'react-bootstrap'\nimport { useSelector } from 'react-redux'\n\nexport default () => {\n  const wallet = useSelector(state => state.wallet)\n  return (\n    <Button>Wallet {wallet.address}</Button>\n  )\n}","import Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { Button, Navbar, Table } from 'react-bootstrap';\nimport SupplyMarket from '../features/supply/Supply';\nimport BorrowMarket from '../features/borrow/Borrow';\nimport Wallet from '../features/wallet/Wallet';\n\nconst LqNavbar = () => {\n  return (\n    <Navbar bg=\"light\">\n      <Navbar.Brand className=\"text-dark\">Liqwid App</Navbar.Brand>\n      <Navbar.Collapse className=\"justify-content-end\">\n        <Wallet />\n      </Navbar.Collapse>\n    </Navbar>\n  )\n}\n\nconst DemoApp = () => {\n  return (\n    <Container>\n      <Row>\n        <Col>\n          <LqNavbar />\n        </Col>\n      </Row>\n      \n      {/* spacing */}\n      <div style={{marginTop: \"100px\"}}></div>\n\n      <Row>\n        <Col>\n          <SupplyMarket />\n        </Col>\n        <Col>\n          <BorrowMarket />\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nexport default DemoApp;","const { createSlice } = require(\"@reduxjs/toolkit\");\n\nexport const borrowSlice = createSlice({\n  name: \"borrow\",\n  initialState: {\n    markets: [\n      {\n        asset: \"ADA\",\n        APY: \"10\",\n        wallet: \"1000\",\n        liquidity: \"?\",\n      },\n    ],\n    totalBalance: 42\n  }\n})","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const walletSlice = createSlice({\n  name: \"wallet\",\n  initialState: {\n    address: \"lqTest\",\n    totalBalance: 1337\n  }\n})","import { configureStore } from '@reduxjs/toolkit'\nimport counterReducer from '../features/counter/counterSlice'\nimport { supplySlice } from '../features/supply/supplySlice'\nimport { borrowSlice } from '../features/borrow/borrowSlice'\nimport { walletSlice } from '../features/wallet/walletSlice'\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    supply: supplySlice.reducer,\n    borrow: borrowSlice.reducer,\n    wallet: walletSlice.reducer\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport LiqwidApp from './layout/LiqwidApp';\nimport DemoApp from './layout/DemoApp';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport './sass/custom.scss';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <DemoApp />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Counter_row__1C_4f\",\"value\":\"Counter_value__1d0te\",\"button\":\"Counter_button__1xpSV\",\"textbox\":\"Counter_textbox__3ODaX\",\"asyncButton\":\"Counter_asyncButton__2UAr3 Counter_button__1xpSV\"};"],"sourceRoot":""}